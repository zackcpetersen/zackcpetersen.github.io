{"status":"ok","feed":{"url":"https://medium.com/feed/@zackcpetersen","title":"Stories by Zack Petersen on Medium","link":"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2","author":"","description":"Stories by Zack Petersen on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*7WMsa8EKSytSLn3GDxBS1A.jpeg"},"items":[{"title":"Deploy a Production Django App With Elastic Beanstalk (Part 2)","pubDate":"2020-12-11 22:04:53","link":"https://medium.com/better-programming/production-django-elastic-beanstalk-part2-4501caf7d8fb?source=rss-5da2dac3078e------2","guid":"https://medium.com/p/4501caf7d8fb","author":"Zack Petersen","thumbnail":"","description":"\n<h4>Production static and media settings, environment variables, and database\u00a0setup</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0tlzcn_qfCsDzwsm\"><figcaption>Photo by <a href=\"https://unsplash.com/@affiliatejoe?utm_source=medium&amp;utm_medium=referral\">Joe</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p><em>If you\u2019re landing here before you\u2019ve read</em><strong><em> </em></strong><a href=\"https://medium.com/@zackcpetersen/production-django-elastic-beanstalk-part1-6632c0d4956a\"><em>part 1</em></a><strong><em>,</em></strong><em> you may want to go back and read that first! Some parts of this article won\u2019t work or won\u2019t make sense without the foundation given in the previous\u00a0article.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xGS8Fn--gOAhdMisWGiJHw.png\"></figure><h3>Table of\u00a0Contents</h3>\n<ol>\n<li>\n<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#8f6c\"><strong>Setting up S3\u200a\u2014\u200aStatic and Media Storage</strong></a><strong><br></strong>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#7b79\">Create a group and user</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#1c5a\">Create a\u00a0bucket</a>\n</li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#fa4f\"><strong>django-storages and\u00a0boto3</strong></a></li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#2db7\"><strong>Environment Variables\u200a\u2014\u200aConsole vs\u00a0CLI</strong></a></li>\n<li>\n<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#8ff7\"><strong>Configure your database to use Postgres with Beanstalk</strong></a><br>\u200a\u2014<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#ad42\">\u200aCreate a Beanstalk database</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#4ac6\">Update database settings</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#1606\">Local PostgreS</a>QL</li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#1504\"><strong>Cleanup</strong></a></li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#955d\"><strong>Conclusion</strong></a></li>\n</ol>\n<h3>Setting up S3\u200a\u2014\u200aStatic and Media\u00a0Storage</h3>\n<p>Up to this point, we have a working Django app deployed on Elastic Beanstalk Amazon Linux 2. Congratulations! However, we still need to set up S3 so the site shows styles and we can upload images\u200a\u2014\u200awhich would be nice, considering it\u2019s an image of the day\u00a0app!</p>\n<h4>Create a group and\u00a0user</h4>\n<p>First things first: We need to create an IAM user with programmatic access so our application can access the S3 bucket we\u2019re creating next. Best practice here is to create a group with the appropriate policies attached and add a new user to the group. <em>Note: I highly recommend creating a new user for the application\u2019s S3 access. Using an admin user opens all kinds of security\u00a0risks.</em></p>\n<p>In the AWS services search bar, look for IAM. Navigate to IAM \u2192 Groups \u2192 Create New Group. Set the group name to something like \u201c<em>S3FullAccess</em>\u201d and go to the next step. Here, search for \u201cS3\u201d and select AmazonS3FullAccess. Click on the next step and create the\u00a0group.</p>\n<p>Now, we\u2019ll navigate to \u201cUsers\u201d and add a new user. Name the user whatever you want, I\u2019ll go with \u201c<em>iotd-s3-access</em>\u201d and select \u201c<em>Programmatic Access</em>.\u201d</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/989/1*Jxkq1cJGRP1Ejg1MNsIF_w.png\"></figure><p>Click to permissions and add this user to the group we created. Click through and create the\u00a0user.</p>\n<p>After the user is created, you will get a success notification and be able to save the Access key ID and Secret access key. <em>Important: if you don\u2019t save these credentials here, you will not be able to see them again. You will have to delete this user and create a new one to get credentials again.</em></p>\n<p>Download the\u00a0.csv file with the credentials in it and head back over to the iotd project settings file. Add two new settings at the end of iotd/settings.py\u200a\u2014\u200awe\u2019re not going to add the keys, but instead references to\u00a0them:</p>\n<pre>if 'AWS_ACCESS_KEY_ID' in os.environ:<br>    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']<br>    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']</pre>\n<p>Committing the actual keys in your settings file is a dangerous idea. It poses a security vulnerability if anyone were to gain access to your project\u2019s code (GitHub or otherwise). Instead of keeping them in the settings file, we\u2019re going to add them as environment variables and pull them into the settings file securely. <a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-container.html#create-deploy-python-custom-container-envprop\">Docs\u00a0here</a>.</p>\n<h4>Create a\u00a0bucket</h4>\n<p>Before we get into environment variables, navigate to S3, and create a new bucket. Make sure to turn <em>off</em> the block public access. We\u2019ll need the images stored here to be public to show them in the API and have access to them later on. Name your bucket whatever you want. I usually recommend enabling versioning, but this is optional. Click \u201cCreate Bucket\u201d and we\u2019re all\u00a0set.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/820/1*UOE2yvEeLQXcSyUF4y8SLw.png\"></figure><h3>django-storages and\u00a0boto3</h3>\n<p>Now for the storage settings in Django. At the root of your project directory run the following:</p>\n<pre>pipenv install django-storages<br>pipenv install boto3</pre>\n<p>This installs two libraries to do all the heavy lifting of dealing with S3. After installing them, be sure to add 'storages' to your INSTALLED_APPS\u200a\u2014\u200afound in settings.py.</p>\n<pre>INSTALLED_APPS = [<br>    'django.contrib.admin',<br>    'django.contrib.auth',<br>    'django.contrib.contenttypes',<br>    'django.contrib.sessions',<br>    'django.contrib.messages',<br>    'django.contrib.staticfiles',</pre>\n<pre>    'rest_framework',<br><br><strong>'storages',</strong></pre>\n<pre>    'images'<br>]</pre>\n<p>Now we have all the pieces we need to set up our static and media storage on S3. Go to your iotd/settings.py file and we\u2019ll add a few more settings to complete the\u00a0setup.</p>\n<pre>STATIC_URL = '/static/'<br>STATIC_ROOT = os.path.join(BASE_DIR, \"static\")</pre>\n<pre>### Django storages - use this for production<br>STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'</pre>\n<pre>MEDIA_URL = '/media/'<br>MEDIA_ROOT = os.path.join(BASE_DIR, 'media')</pre>\n<pre>### Django storages - use in production<br>DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'</pre>\n<p>If you\u2019re running things locally and don\u2019t want to push changes up to S3 every time, comment out STATICFILES_STORAGE and DEFAULT_FILE_STORAGE before you run collectstatic or upload local media\u00a0files.</p>\n<h3>Environment Variables\u200a\u2014\u200aConsole vs\u00a0CLI</h3>\n<p>We need to add the environment variables so os.environ can populate the values we need. There are a few ways to do this. The most straightforward is to navigate to your Beanstalk \u2192 &lt;your environment&gt; \u2192 configuration \u2192 software \u2192 environment variables. You can add them all manually here but in my opinion, this takes too much\u00a0time.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DWmlMF5eCnD6KaQFRTnr4w.png\"></figure><p>I prefer to use the eb setenv command. You can set as many environment variables as you want in one command. <a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-setenv.html\">Docs\u00a0here</a>.</p>\n<pre>eb setenv \\<br>AWS_S3_REGION_NAME='us-west-2' \\<br>AWS_STORAGE_BUCKET_NAME='iotd-static'</pre>\n<p>If you\u2019ve followed everything so far, you\u2019ll want to add the following environment variables, either through the command line or the\u00a0console:</p>\n<pre>AWS_ACCESS_KEY_ID<br>AWS_SECRET_ACCESS_KEY<br>AWS_STORAGE_BUCKET_NAME<br>AWS_S3_REGION_NAME</pre>\n<p>Get your access key and secret access key from the\u00a0.csv you downloaded earlier. The bucket name is whatever you named your S3 bucket and the region name is the region your Beanstalk environment is in\u200a\u2014\u200amine is us-west-2.</p>\n<p>Once those are added, make sure you\u2019ve committed your changes to Git and run eb deploy\u00a0. If you have any issues, start by checking out the three log files mentioned earlier in the article to find the error message. Otherwise, try eb open and navigate to\u00a0/api/.</p>\n<p>Since we now have styles, let\u2019s test the media upload. Upload an image and give it a name, click POST. When the page reloads, click on the image link and you should see your image. Notice the image URL is from your S3\u00a0bucket.</p>\n<p>Congratulations! We have now deployed our app to Beanstalk and set up production static and media files. There\u2019s only one thing left to\u00a0do.</p>\n<h3>Configure Your Database to Use Postgres with Beanstalk</h3>\n<p>Up until now, our database has been a local db.sqlite3 that lives in our project directory along with our other files. This works well in a development environment but is a bad idea in production. Our final step in this tutorial is to set up a Postgresql database in beanstalk and configure Django to do everything database related\u00a0there.</p>\n<h4>Create a Beanstalk database</h4>\n<p>First, open the console settings with eb console and navigate to configuration. Scroll to the bottom until you find \u201cdatabase\u201d and click \u201cedit.\u201d Apply the following settings:</p>\n<ul>\n<li>\n<strong>Engine</strong>: Postgres</li>\n<li>\n<strong>Engine version</strong>: Go with the\u00a0default</li>\n<li>\n<strong>Instance class</strong>: I recommend the free tier db.t2.micro</li>\n<li>\n<strong>Storage</strong>: I recommend 5 GB, but choose whatever makes\u00a0sense</li>\n<li>\n<strong>Username/Password</strong>: set these to whatever you\u00a0want</li>\n<li>\n<strong>Retention</strong>: If you want the database to create a snapshot on termination of environment, select Create Snapshot. Otherwise, select\u00a0Delete.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OHDVRi8fDYHf-EheXtc2vg.png\"></figure><p>After everything is set, click Apply and Beanstalk will create the database for you. While this is creating, let\u2019s configure the settings to look at the new\u00a0DB.</p>\n<h4>Update database\u00a0settings</h4>\n<p>First, we need to install psycopg2:</p>\n<pre>pipenv install pyscopg2-binary</pre>\n<p>Add the following to your settings.py file and remove the default DATABASE\u00a0config:</p>\n<pre><em>if </em>'RDS_DB_NAME' <em>in </em>os.environ:<br>    DATABASES = {<br>        'default': {<br>            'ENGINE': 'django.db.backends.postgresql_psycopg2',<br>            'NAME': os.environ['RDS_DB_NAME'],<br>            'USER': os.environ['RDS_USERNAME'],<br>            'PASSWORD': os.environ['RDS_PASSWORD'],<br>            'HOST': os.environ['RDS_HOSTNAME'],<br>            'PORT': os.environ['RDS_PORT'],<br>        }<br>    }<br><em>else</em>:<br>    DATABASES = {<br>        'default': {<br>            'ENGINE': 'django.db.backends.postgresql_psycopg2',<br>            'NAME': 'iotd',<br>            'USER': 'iotd',<br>            'PASSWORD': 'iotd',<br>            'HOST': 'localhost',<br>            'PORT': '5432',<br>        }<br>    }</pre>\n<p>Commit your changes and run eb deploy again, this will swap your database from MySQL to Postgresql! <em>Note: The database changes you made in the previous step take a minute to complete\u200a\u2014\u200ayou will not be able to deploy until it is\u00a0done.</em></p>\n<h4>Local PostgreSQL</h4>\n<p>If you\u2019ve cloned from the repo mentioned at the beginning of the tutorial, there is a <em>docker-compose.yml</em> included that will serve as a local PostgreSQL database for development. Make sure you have Docker installed and running, and while in the root directory of the project run the following:</p>\n<pre>docker-compose up -d</pre>\n<p>This will spin up a PostgreSQL container automatically with the database settings in iotd.settings.base\u00a0. This will allow you to easily use PostgreSQL locally as\u00a0well!</p>\n<h3>Cleanup</h3>\n<p>To remove your beanstalk environment, all you need to do is run eb terminate and aws will do the cleanup for\u00a0you!</p>\n<h3>Conclusion</h3>\n<p>Amazing work! We covered a lot in this tutorial and got our app on the web with Beanstalk. Coming soon, I\u2019ll be building a front end with Vue.js and using this API as the back end\u200a\u2014\u200akeep an eye\u00a0out!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4501caf7d8fb\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/better-programming/production-django-elastic-beanstalk-part2-4501caf7d8fb\">Deploy a Production Django App With Elastic Beanstalk (Part 2)</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Production static and media settings, environment variables, and database\u00a0setup</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0tlzcn_qfCsDzwsm\"><figcaption>Photo by <a href=\"https://unsplash.com/@affiliatejoe?utm_source=medium&amp;utm_medium=referral\">Joe</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p><em>If you\u2019re landing here before you\u2019ve read</em><strong><em> </em></strong><a href=\"https://medium.com/@zackcpetersen/production-django-elastic-beanstalk-part1-6632c0d4956a\"><em>part 1</em></a><strong><em>,</em></strong><em> you may want to go back and read that first! Some parts of this article won\u2019t work or won\u2019t make sense without the foundation given in the previous\u00a0article.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xGS8Fn--gOAhdMisWGiJHw.png\"></figure><h3>Table of\u00a0Contents</h3>\n<ol>\n<li>\n<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#8f6c\"><strong>Setting up S3\u200a\u2014\u200aStatic and Media Storage</strong></a><strong><br></strong>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#7b79\">Create a group and user</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#1c5a\">Create a\u00a0bucket</a>\n</li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#fa4f\"><strong>django-storages and\u00a0boto3</strong></a></li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#2db7\"><strong>Environment Variables\u200a\u2014\u200aConsole vs\u00a0CLI</strong></a></li>\n<li>\n<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#8ff7\"><strong>Configure your database to use Postgres with Beanstalk</strong></a><br>\u200a\u2014<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#ad42\">\u200aCreate a Beanstalk database</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#4ac6\">Update database settings</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#1606\">Local PostgreS</a>QL</li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#1504\"><strong>Cleanup</strong></a></li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#955d\"><strong>Conclusion</strong></a></li>\n</ol>\n<h3>Setting up S3\u200a\u2014\u200aStatic and Media\u00a0Storage</h3>\n<p>Up to this point, we have a working Django app deployed on Elastic Beanstalk Amazon Linux 2. Congratulations! However, we still need to set up S3 so the site shows styles and we can upload images\u200a\u2014\u200awhich would be nice, considering it\u2019s an image of the day\u00a0app!</p>\n<h4>Create a group and\u00a0user</h4>\n<p>First things first: We need to create an IAM user with programmatic access so our application can access the S3 bucket we\u2019re creating next. Best practice here is to create a group with the appropriate policies attached and add a new user to the group. <em>Note: I highly recommend creating a new user for the application\u2019s S3 access. Using an admin user opens all kinds of security\u00a0risks.</em></p>\n<p>In the AWS services search bar, look for IAM. Navigate to IAM \u2192 Groups \u2192 Create New Group. Set the group name to something like \u201c<em>S3FullAccess</em>\u201d and go to the next step. Here, search for \u201cS3\u201d and select AmazonS3FullAccess. Click on the next step and create the\u00a0group.</p>\n<p>Now, we\u2019ll navigate to \u201cUsers\u201d and add a new user. Name the user whatever you want, I\u2019ll go with \u201c<em>iotd-s3-access</em>\u201d and select \u201c<em>Programmatic Access</em>.\u201d</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/989/1*Jxkq1cJGRP1Ejg1MNsIF_w.png\"></figure><p>Click to permissions and add this user to the group we created. Click through and create the\u00a0user.</p>\n<p>After the user is created, you will get a success notification and be able to save the Access key ID and Secret access key. <em>Important: if you don\u2019t save these credentials here, you will not be able to see them again. You will have to delete this user and create a new one to get credentials again.</em></p>\n<p>Download the\u00a0.csv file with the credentials in it and head back over to the iotd project settings file. Add two new settings at the end of iotd/settings.py\u200a\u2014\u200awe\u2019re not going to add the keys, but instead references to\u00a0them:</p>\n<pre>if 'AWS_ACCESS_KEY_ID' in os.environ:<br>    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']<br>    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']</pre>\n<p>Committing the actual keys in your settings file is a dangerous idea. It poses a security vulnerability if anyone were to gain access to your project\u2019s code (GitHub or otherwise). Instead of keeping them in the settings file, we\u2019re going to add them as environment variables and pull them into the settings file securely. <a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-container.html#create-deploy-python-custom-container-envprop\">Docs\u00a0here</a>.</p>\n<h4>Create a\u00a0bucket</h4>\n<p>Before we get into environment variables, navigate to S3, and create a new bucket. Make sure to turn <em>off</em> the block public access. We\u2019ll need the images stored here to be public to show them in the API and have access to them later on. Name your bucket whatever you want. I usually recommend enabling versioning, but this is optional. Click \u201cCreate Bucket\u201d and we\u2019re all\u00a0set.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/820/1*UOE2yvEeLQXcSyUF4y8SLw.png\"></figure><h3>django-storages and\u00a0boto3</h3>\n<p>Now for the storage settings in Django. At the root of your project directory run the following:</p>\n<pre>pipenv install django-storages<br>pipenv install boto3</pre>\n<p>This installs two libraries to do all the heavy lifting of dealing with S3. After installing them, be sure to add 'storages' to your INSTALLED_APPS\u200a\u2014\u200afound in settings.py.</p>\n<pre>INSTALLED_APPS = [<br>    'django.contrib.admin',<br>    'django.contrib.auth',<br>    'django.contrib.contenttypes',<br>    'django.contrib.sessions',<br>    'django.contrib.messages',<br>    'django.contrib.staticfiles',</pre>\n<pre>    'rest_framework',<br><br><strong>'storages',</strong></pre>\n<pre>    'images'<br>]</pre>\n<p>Now we have all the pieces we need to set up our static and media storage on S3. Go to your iotd/settings.py file and we\u2019ll add a few more settings to complete the\u00a0setup.</p>\n<pre>STATIC_URL = '/static/'<br>STATIC_ROOT = os.path.join(BASE_DIR, \"static\")</pre>\n<pre>### Django storages - use this for production<br>STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'</pre>\n<pre>MEDIA_URL = '/media/'<br>MEDIA_ROOT = os.path.join(BASE_DIR, 'media')</pre>\n<pre>### Django storages - use in production<br>DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'</pre>\n<p>If you\u2019re running things locally and don\u2019t want to push changes up to S3 every time, comment out STATICFILES_STORAGE and DEFAULT_FILE_STORAGE before you run collectstatic or upload local media\u00a0files.</p>\n<h3>Environment Variables\u200a\u2014\u200aConsole vs\u00a0CLI</h3>\n<p>We need to add the environment variables so os.environ can populate the values we need. There are a few ways to do this. The most straightforward is to navigate to your Beanstalk \u2192 &lt;your environment&gt; \u2192 configuration \u2192 software \u2192 environment variables. You can add them all manually here but in my opinion, this takes too much\u00a0time.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DWmlMF5eCnD6KaQFRTnr4w.png\"></figure><p>I prefer to use the eb setenv command. You can set as many environment variables as you want in one command. <a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-setenv.html\">Docs\u00a0here</a>.</p>\n<pre>eb setenv \\<br>AWS_S3_REGION_NAME='us-west-2' \\<br>AWS_STORAGE_BUCKET_NAME='iotd-static'</pre>\n<p>If you\u2019ve followed everything so far, you\u2019ll want to add the following environment variables, either through the command line or the\u00a0console:</p>\n<pre>AWS_ACCESS_KEY_ID<br>AWS_SECRET_ACCESS_KEY<br>AWS_STORAGE_BUCKET_NAME<br>AWS_S3_REGION_NAME</pre>\n<p>Get your access key and secret access key from the\u00a0.csv you downloaded earlier. The bucket name is whatever you named your S3 bucket and the region name is the region your Beanstalk environment is in\u200a\u2014\u200amine is us-west-2.</p>\n<p>Once those are added, make sure you\u2019ve committed your changes to Git and run eb deploy\u00a0. If you have any issues, start by checking out the three log files mentioned earlier in the article to find the error message. Otherwise, try eb open and navigate to\u00a0/api/.</p>\n<p>Since we now have styles, let\u2019s test the media upload. Upload an image and give it a name, click POST. When the page reloads, click on the image link and you should see your image. Notice the image URL is from your S3\u00a0bucket.</p>\n<p>Congratulations! We have now deployed our app to Beanstalk and set up production static and media files. There\u2019s only one thing left to\u00a0do.</p>\n<h3>Configure Your Database to Use Postgres with Beanstalk</h3>\n<p>Up until now, our database has been a local db.sqlite3 that lives in our project directory along with our other files. This works well in a development environment but is a bad idea in production. Our final step in this tutorial is to set up a Postgresql database in beanstalk and configure Django to do everything database related\u00a0there.</p>\n<h4>Create a Beanstalk database</h4>\n<p>First, open the console settings with eb console and navigate to configuration. Scroll to the bottom until you find \u201cdatabase\u201d and click \u201cedit.\u201d Apply the following settings:</p>\n<ul>\n<li>\n<strong>Engine</strong>: Postgres</li>\n<li>\n<strong>Engine version</strong>: Go with the\u00a0default</li>\n<li>\n<strong>Instance class</strong>: I recommend the free tier db.t2.micro</li>\n<li>\n<strong>Storage</strong>: I recommend 5 GB, but choose whatever makes\u00a0sense</li>\n<li>\n<strong>Username/Password</strong>: set these to whatever you\u00a0want</li>\n<li>\n<strong>Retention</strong>: If you want the database to create a snapshot on termination of environment, select Create Snapshot. Otherwise, select\u00a0Delete.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OHDVRi8fDYHf-EheXtc2vg.png\"></figure><p>After everything is set, click Apply and Beanstalk will create the database for you. While this is creating, let\u2019s configure the settings to look at the new\u00a0DB.</p>\n<h4>Update database\u00a0settings</h4>\n<p>First, we need to install psycopg2:</p>\n<pre>pipenv install pyscopg2-binary</pre>\n<p>Add the following to your settings.py file and remove the default DATABASE\u00a0config:</p>\n<pre><em>if </em>'RDS_DB_NAME' <em>in </em>os.environ:<br>    DATABASES = {<br>        'default': {<br>            'ENGINE': 'django.db.backends.postgresql_psycopg2',<br>            'NAME': os.environ['RDS_DB_NAME'],<br>            'USER': os.environ['RDS_USERNAME'],<br>            'PASSWORD': os.environ['RDS_PASSWORD'],<br>            'HOST': os.environ['RDS_HOSTNAME'],<br>            'PORT': os.environ['RDS_PORT'],<br>        }<br>    }<br><em>else</em>:<br>    DATABASES = {<br>        'default': {<br>            'ENGINE': 'django.db.backends.postgresql_psycopg2',<br>            'NAME': 'iotd',<br>            'USER': 'iotd',<br>            'PASSWORD': 'iotd',<br>            'HOST': 'localhost',<br>            'PORT': '5432',<br>        }<br>    }</pre>\n<p>Commit your changes and run eb deploy again, this will swap your database from MySQL to Postgresql! <em>Note: The database changes you made in the previous step take a minute to complete\u200a\u2014\u200ayou will not be able to deploy until it is\u00a0done.</em></p>\n<h4>Local PostgreSQL</h4>\n<p>If you\u2019ve cloned from the repo mentioned at the beginning of the tutorial, there is a <em>docker-compose.yml</em> included that will serve as a local PostgreSQL database for development. Make sure you have Docker installed and running, and while in the root directory of the project run the following:</p>\n<pre>docker-compose up -d</pre>\n<p>This will spin up a PostgreSQL container automatically with the database settings in iotd.settings.base\u00a0. This will allow you to easily use PostgreSQL locally as\u00a0well!</p>\n<h3>Cleanup</h3>\n<p>To remove your beanstalk environment, all you need to do is run eb terminate and aws will do the cleanup for\u00a0you!</p>\n<h3>Conclusion</h3>\n<p>Amazing work! We covered a lot in this tutorial and got our app on the web with Beanstalk. Coming soon, I\u2019ll be building a front end with Vue.js and using this API as the back end\u200a\u2014\u200akeep an eye\u00a0out!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4501caf7d8fb\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/better-programming/production-django-elastic-beanstalk-part2-4501caf7d8fb\">Deploy a Production Django App With Elastic Beanstalk (Part 2)</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["aws","programming","python","database","django"]},{"title":"Deploy a Production Django App With Elastic Beanstalk (Part 1)","pubDate":"2020-12-11 22:04:06","link":"https://medium.com/better-programming/production-django-elastic-beanstalk-part1-6632c0d4956a?source=rss-5da2dac3078e------2","guid":"https://medium.com/p/6632c0d4956a","author":"Zack Petersen","thumbnail":"","description":"\n<h4>Using Django 3.1.3, Python 3.7.9, and Amazon Linux\u00a02</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*qlZzWcFRfYNW2F89\"><figcaption>Photo by <a href=\"https://unsplash.com/@brandi1?utm_source=medium&amp;utm_medium=referral\">Brandi Redd</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>In this tutorial, we\u2019ll be creating a simple Django Rest Framework (DRF) app and deploying it with Beanstalk to make our endpoints available on the web. We\u2019ll do everything, from creating our virtual environment and getting the Django app running locally, to deploying the code on Beanstalk and hooking it into a Postgresql RDS database. Let\u2019s get\u00a0going!</p>\n<p><em>If you\u2019re already familiar with everything covered here, or you\u2019re looking for help with handling production static and media files, database settings, or environment variables\u200a\u2014\u200acheck out </em><a href=\"https://medium.com/@zackcpetersen/production-django-elastic-beanstalk-part2-4501caf7d8fb\"><strong><em>part 2</em></strong></a><em>\u00a0instead!</em></p>\n<h3>Table of\u00a0Contents</h3>\n<ol>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#d874\"><strong>Why Use Elastic Beanstalk</strong></a></li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#a8cf\"><strong>Installing Pyenv and\u00a0Pipenv</strong></a></li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#a53e\"><strong>Clone The\u00a0Repo</strong></a></li>\n<li>\n<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#504c\"><strong>Preparing Beanstalk</strong></a><strong><br>\u200a\u2014\u200a</strong><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#9261\">Downloading the EB CLI</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#82d7\">Initializing elastic Beanstalk</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#9cbc\">Creating the Beanstalk environment</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#1fe6\">Adding\u00a0.ebextensions</a>\n</li>\n<li>\n<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#c66f\"><strong>SSH Into the Server</strong></a><strong> (Debugging)<br></strong>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#f439\">Grab your EC2 instance public IP</a><br> \u2014<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#3ff5\">Checking the log\u00a0files</a>\n</li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#16a4\"><strong>Add Your\u00a0.ebextensions directory and\u00a0deploy</strong></a></li>\n</ol>\n<h3>Why Use Elastic Beanstalk?</h3>\n<p>EBS (Elastic Beanstalk) is a platform-as-a-service used to deploy web apps without the pain of creating your own EC2 instances, load balancers, auto-scaling, health monitoring, and more. It\u2019s a quick and relatively easy way to get your app on the web. Despite everything being managed by AWS, it still leaves a decent amount of control and visibility to the developer.</p>\n<p>To get started, we\u2019ll be using Pipenv and Pyenv to help manage our dependencies and Python\u00a0version.</p>\n<h3>Installing Pyenv and\u00a0Pipenv</h3>\n<p>If you\u2019re using a Mac, you can brew install both requirements (shown below). If you\u2019re not on a mac, follow <a href=\"https://pipenv-fork.readthedocs.io/en/latest/install.html#pragmatic-installation-of-pipenv\">these instructions to install Pipenv</a>, and <a href=\"https://github.com/pyenv/pyenv#installation\">these for\u00a0Pyenv</a>.</p>\n<pre>brew install pipenv<br>brew install pyenv</pre>\n<p>For use with Pyenv, you\u2019ll also want to add this to your ~/.zprofile | ~/.zshrc if using zsh\u2014 or ~/.bashrc | ~/.bash_profile if using\u00a0bash.</p>\n<pre>export PYENV_ROOT=\"$HOME/.pyenv\"<br>export PATH=\"$PYENV_ROOT/bin:$PATH\"<br>if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then<br>  eval \"$(pyenv init -)\"<br>fi</pre>\n<p>After making changes to your ~/.zshrc or ~/.zprofile, be sure to restart your\u00a0shell:</p>\n<pre>exec \"$SHELL\"</pre>\n<p>Now we have both installed, let\u2019s download Python\u00a03.7.9:</p>\n<pre>pyenv install 3.7.9</pre>\n<p>This will take a minute, but once it\u2019s finished you\u2019ll have python 3.7.9 available on your pyenv\u00a0path.</p>\n<h3>Clone the\u00a0Repo</h3>\n<p>Now, let\u2019s create the project and the virtual environment with pipenv. Clone my lightweight <a href=\"https://github.com/zackcpetersen/iotd\">Image Of The Day repo</a> (built with DRF) to follow along with the tutorial:</p>\n<pre>git clone git@github.com:zackcpetersen/iotd.git<br>cd iotd<br>pipenv install --python ~/.pyenv/versions/3.7.9/bin/python</pre>\n<p><em>Note: if you don\u2019t have the correct python version on that path try\u00a0this:</em></p>\n<pre>~/.pyenv/shims/versions/3.7.9/bin/python</pre>\n<p>This will set the Python version in the virtual environment to 3.7.9 and install all requirements from the\u00a0Pipfile.</p>\n<p><em>Pro tip: If you have a requirements.txt file already, use </em><em>pipenv install -r requirements.txt to install everything from\u00a0there.</em></p>\n<p>The project directory should look something like\u00a0this:</p>\n<pre>\u251c\u2500\u2500 Pipfile<br>\u251c\u2500\u2500 Pipfile.lock<br>\u251c\u2500\u2500 db.sqlite3<br>\u251c\u2500\u2500 images<br>\u2502   \u251c\u2500\u2500 __init__.py<br>\u2502   \u251c\u2500\u2500 admin.py<br>\u2502   \u251c\u2500\u2500 api<br>\u2502   \u251c\u2500\u2500 apps.py<br>\u2502   \u251c\u2500\u2500 management<br>\u2502   \u251c\u2500\u2500 migrations<br>\u2502   \u251c\u2500\u2500 models.py<br>\u2502   \u251c\u2500\u2500 tests.py<br>\u2502   \u2514\u2500\u2500 views.py<br>\u251c\u2500\u2500 iotd<br>\u2502   \u251c\u2500\u2500 __init__.py<br>\u2502   \u251c\u2500\u2500 asgi.py<br>\u2502   \u251c\u2500\u2500 settings.py<br>\u2502   \u251c\u2500\u2500 urls.py<br>\u2502   \u2514\u2500\u2500 wsgi.py<br>\u251c\u2500\u2500 manage.py<br>\u251c\u2500\u2500 media<br>\u2514\u2500\u2500 static<br>    \u251c\u2500\u2500 admin<br>    \u2514\u2500\u2500 rest_framework</pre>\n<p>In a terminal, run pipenv shell, if you haven\u2019t already, and we\u2019ll make migrations, migrate, and createsuperuser. At this point, our local server should be ready to\u00a0go!</p>\n<p><em>The </em><em>createsu command is a </em><a href=\"https://docs.djangoproject.com/en/3.1/howto/custom-management-commands/\"><em>django-admin custom command</em></a><em> you can find in </em><em>images/management/commands/createsu.py</em>:</p>\n<pre>python manage.py makemigrations<br>python manage.py migrate<br>python manage.py createsu<br>python manage.py runserver</pre>\n<p>Navigate to <a href=\"http://127.0.0.1:8000/api/\">127.0.0.1:8000/api/</a> and you\u2019ll see a page that looks like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JsOePAnNBPwfnvsRcUmXxA.png\"></figure><p>Click on <a href=\"http://127.0.0.1:8000/api/images/\">http://127.0.0.1:8000/api/images/</a> to go to the image page of DRF. From here, add an image and give it a name. When it finishes uploading, click on the image link and your image will load from your local filesystem with the URL: http://127.0.0.1:8000/media/&lt;img_name&gt;\u00a0.</p>\n<p>Congratulations! You\u2019ve successfully set up your local environment and are ready to deploy to Beanstalk.</p>\n<h3>Preparing Beanstalk</h3>\n<p>Before you can use Beanstalk, you\u2019ll need an AWS account. If you don\u2019t have an account already, <a href=\"https://portal.aws.amazon.com/billing/signup#/start\">create one\u00a0here</a>.</p>\n<h4>Downloading the EB\u00a0CLI</h4>\n<p>Let\u2019s go back to the terminal window and install the Beanstalk CLI (pipenv install --dev if you cloned the repo). Be sure to run the pipenv shell\u00a0first:</p>\n<pre>pipenv install awsebcli --dev</pre>\n<p>I\u2019m installing to dev here because we most likely won\u2019t need the CLI on the production server, so it\u2019s best to leave it for development only.</p>\n<p>Confirm you have it installed with eb --version.</p>\n<pre>\u276f eb --version<br>EB CLI 3.19.2 (Python 3.7.9)</pre>\n<h4>Initializing elastic Beanstalk</h4>\n<p>Since we\u2019re all set up with AWS and Beanstalk CLI, let\u2019s get\u00a0started!</p>\n<pre>eb init</pre>\n<p>This will prompt you to get set up with Beanstalk and configure the default application options.</p>\n<ul>\n<li>\n<strong>Default Region</strong>: The default AWS region for beanstalk</li>\n<li>\n<strong>Credentials</strong>: Your AWS IAM user creds. Follow <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html\">this guide</a> to create one if you don\u2019t have them\u00a0already</li>\n<li>\n<strong>App name</strong>: What your application will be\u00a0named</li>\n<li>\n<strong>Python version</strong>: At the time of this writing, you can choose from Python 3.6 and Python 3.7. They are fundamentally different and this tutorial covers 3.7 with Gunicorn.</li>\n<li>\n<strong>CodeCommit</strong>: Out of the scope of this tutorial\u200a\u2014\u200aselect\u00a0no.</li>\n<li>\n<strong>SSH</strong>: Select create_new_keypair. Follow the prompts to create it and remember the name (default is aws-eb). In my opinion, tailing the server logs is the easiest way to figure out deployment problems.</li>\n<li>\n<strong>Keypair</strong>: You\u2019ll probably want to generate a new keypair, this will be passed as part of your SSH command to log in to the\u00a0server.</li>\n</ul>\n<p>Once you\u2019re done setting this up, you\u2019ll notice a new hidden directory in your project called\u00a0.elasticbeanstalk.</p>\n<p>There is a config.yml file in there and it\u2019s everything you set up saved to your local directory for future\u00a0use.</p>\n<p><em>Pro tip: If you need to start over with Beanstalk on this project for whatever reason, delete this directory and run </em><em>eb init again to change any defaults.</em></p>\n<h4>Creating the Beanstalk environment</h4>\n<p>Now that we have an application created on Beanstalk, let\u2019s create our environment:</p>\n<pre>eb create</pre>\n<p>Again, you\u2019ll be prompted with questions about what you would like to\u00a0create.</p>\n<ul>\n<li>\n<strong>Env Name</strong>: What your environment will be\u00a0named.</li>\n<li>\n<strong>DNS CNAME prefix</strong>: Leave as the\u00a0default.</li>\n<li>\n<strong>Load Balancer Type</strong>: Choose Application.</li>\n<li>\n<strong>Spot Fleet Requests</strong>: Out of scope, select\u00a0no.</li>\n</ul>\n<p>After you finish with the setup, it will begin to create the environment for you and try to deploy it to Beanstalk. This takes a few minutes, but feel free to watch events and see what\u2019s happening under the\u00a0hood.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mkqrRpd0h4SCyqBkgl92oA.png\"></figure><h4>Adding\u00a0.ebextensions</h4>\n<p>Once the deployment is finished, it should say it was successful. However, if you run eb open\u00a0, you\u2019ll get a 502 error when the webpage opens. This can difficult to debug because without a decent amount of digging, there\u2019s no way to see why. <em>Hint: it\u2019s your WSGI\u00a0path.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/268/1*BEis8r5pzIewv0amh_28cA.png\"></figure><p>To fix this, we\u2019ll create a new directory called\u00a0.ebextensions. Inside, we create a file called django.config. Make sure you\u2019re in at the project root for these commands.</p>\n<p><em>Note: If you cloned the repo, this file already exists and you just need to uncomment the config settings.</em></p>\n<pre>mkdir .ebextensions<br>touch .ebextensions/django.config</pre>\n<p>Here\u2019s how our project should look after creating the directory and\u00a0file:</p>\n<pre>\u251c\u2500\u2500 Pipfile<br>\u251c\u2500\u2500 Pipfile.lock<br>\u251c\u2500\u2500 db.sqlite3<br><strong>\u251c\u2500\u2500 .ebextensions<br>\u2502   \u251c\u2500\u2500 django.config</strong><br>\u251c\u2500\u2500 images<br>\u2502   \u251c\u2500\u2500 __init__.py<br>\u2502   \u251c\u2500\u2500 admin.py<br>\u2502   \u251c\u2500\u2500 api<br>\u2502   \u251c\u2500\u2500 apps.py<br>\u2502   \u251c\u2500\u2500 management<br>\u2502   \u251c\u2500\u2500 migrations<br>\u2502   \u251c\u2500\u2500 models.py<br>\u2502   \u251c\u2500\u2500 tests.py<br>\u2502   \u2514\u2500\u2500 views.py<br>\u251c\u2500\u2500 iotd<br>\u2502   \u251c\u2500\u2500 __init__.py<br>\u2502   \u251c\u2500\u2500 asgi.py<br>\u2502   \u251c\u2500\u2500 settings.py<br>\u2502   \u251c\u2500\u2500 urls.py<br>\u2502   \u2514\u2500\u2500 wsgi.py<br>\u251c\u2500\u2500 manage.py<br>\u251c\u2500\u2500 media<br>\u2514\u2500\u2500 static<br>    \u251c\u2500\u2500 admin<br>    \u2514\u2500\u2500 rest_framework</pre>\n<p>Inside the django.config file, add the following:</p>\n<pre>option_settings:<br>  aws:elasticbeanstalk:application:environment:<br>    DJANGO_SETTINGS_MODULE: \"iotd.settings\"<br>    PYTHONPATH: \"/var/app/current:$PYTHONPATH\"<br>  aws:elasticbeanstalk:container:python:<br>    WSGIPath: \"iotd.wsgi:application\"<br>  aws:elasticbeanstalk:environment:process:default:<br>    HealthCheckPath: \"/api\"<br>    MatcherHTTPCode: \"200-499\"<br><br>container_commands:<br>  01_makemigrations:<br>    command: \"source /var/app/venv/*/bin/activate &amp;&amp; python3 manage.py makemigrations --noinput\"<br>    leader_only: true<br>  02_migrate:<br>    command: \"source /var/app/venv/*/bin/activate &amp;&amp; python3 manage.py migrate --noinput\"<br>    leader_only: true<br>  03_createsu:<br>    command: \"source /var/app/venv/*/bin/activate &amp;&amp; python3 manage.py createsu\"<br>  04_collectstatic:<br>    command: \"source /var/app/venv/*/bin/activate &amp;&amp; python3 manage.py collectstatic --noinput\"<br>    leader_only: true</pre>\n<p>There\u2019s a lot going on here, but this config file has all the commands to get set up on the server and have your Django app running properly, including setting up your WSGI\u00a0path.</p>\n<p>My first time deploying to Elastic Beanstalk with Amazon Linux 2 was challenging because of these config settings. At the time of writing, it\u2019s not documented that you need to run the migration commands <em>after</em> manually activating the virtual environment (<a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-django.html#python-django-migrate-site\">see docs here</a>). They tell you to run django-admin.py migrate, which was throwing all sorts of errors for me and it was difficult to figure out what was\u00a0wrong.</p>\n<p>After some trial and error, I discovered the virtual environment on the application server is located at /var/app/venv/. So in the config commands, I first source (activate) the virtualenv and then run my migration commands as\u00a0normal.</p>\n<pre>### To run a command during deployment<br><strong>source /var/app/venv/*/bin/activate</strong> &amp;&amp; python manage.py migrate</pre>\n<p>Another \u201cgotcha\u201d I discovered when making my first Beanstalk environment is you need to have all the files you want to be deployed to the app server committed to git. For example, if you don\u2019t commit the\u00a0.ebextensions directory, it doesn\u2019t get added as a file in deployment and none of the commands inside will run. The same is true for your Pipfile and anything else Beanstalk needs to set up your\u00a0app.</p>\n<h3>SSH Into the\u00a0Server</h3>\n<p>Let\u2019s SSH into the server and watch our custom commands output as the app deploys. (This is optional but helpful for debugging if your deployment is having\u00a0issues).</p>\n<h4>Grab your EC2 instance public\u00a0IP</h4>\n<p>The new keypair you created with eb init earlier should be stored in your ~/.ssh directory. With that in mind, navigate to your <a href=\"http://console.aws.amazon.com/ec2/v2/home#Instances:\">AWS EC2 instances</a> and find the Public IPv4 address with the instance that was created. If you don\u2019t see your instance, check your\u00a0region!</p>\n<p>If you aren\u2019t sure which instance it is, check the tags on your instances to find the one that corresponds with your Beanstalk name.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/267/1*Bi-9NySLb20crvtBRwak3Q.png\"></figure><p>Copy the address and\u00a0run:</p>\n<pre>ssh -i ~/.ssh/&lt;keypair_name&gt; ec2-user@&lt;public_ipv4_address&gt;<br>## Example<br>ssh -i ~/.ssh/aws-eb ec2-user@34.216.119.130</pre>\n<p>Type yes to add the host to your known hosts. We\u2019re\u00a0in!</p>\n<p>Now to check the log files. You can accomplish something similar by downloading the logs from the Beanstalk console, but it was annoying to me and took too many extra steps. Here, we\u2019re going to tail the log files as they populate and see if we run into issues in real-time.</p>\n<h4>Checking the log\u00a0files</h4>\n<p>Navigate to the log directory with cd /var/log/:</p>\n<pre>[ec2-user@ip-172-31-21-105 ~]$ cd /var/log/</pre>\n<p>In this directory, if you ls you\u2019ll see a whole bunch of log files to check out. In my experience with Beanstalk, there are three that are the most informative about deployment issues:</p>\n<pre>eb-engine.log<br>cfn-init.log<br>cfn-init-cmd.log</pre>\n<p>When I have an issue on deployment, I check the logs in this order and have been able to pinpoint the problem exactly. For this example, let\u2019s tail the most granular log and see the output as it\u00a0deploys:</p>\n<pre>tail -n 100 -f cfn-init-cmd.log</pre>\n<p>The -f in this command means follow, so you will be able to see the logs as they are updated. Leave this here for now, we\u2019ll come back to\u00a0it.</p>\n<h3>Add Your\u00a0.ebextensions Directory and\u00a0Deploy</h3>\n<p>In a separate terminal window, navigate back to the iotd project root and add everything to git (including db.sqlite3). <em>Note: you don\u2019t have to push anything up, you only need to commit the files that you want deployed.</em></p>\n<pre>git add .<br>git commit -m \"adding .ebextension config file\"</pre>\n<p>Once your changes are committed, it\u2019s time to deploy again\u200a\u2014\u200athis time, we\u2019ll watch the logs to see what happens. Make sure to run pipenv shell before running any commands.</p>\n<p><em>Pro Tip: If you\u2019re serious you can open three terminal windows and watch all three log files at\u00a0once.</em></p>\n<pre>eb deploy</pre>\n<p>If all goes well, as the deployment runs you should see outputs that look something like\u00a0this:</p>\n<pre> Command 01_makemigrations<br> -----------------------Command Output-----------------------<br>  Migrations for 'images':<br>    images/migrations/0002_auto_20201125_0049.py<br>      - Alter field image on image<br> ------------------------------------------------------------<br> Completed successfully.</pre>\n<p>Now if you go back to your project root folder and run eb open again, you should land on a page that looks like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sategCAUXeOLeLi459b-MQ.png\"></figure><p>Progress! This is much better than the 502 error we had before. To fix this, go to the iotd/settings.py file and add your beanstalk URL to the ALLOWED_HOSTS setting. Commit your changes to git and run eb deploy\u00a0again.</p>\n<p><em>Hint: Find your beanstalk URL with </em><em>eb status, look for\u00a0CNAME.</em></p>\n<p>Run eb open and add \u201c/api/\u201d to the end of your URL. This time, success!\u00a0Except\u2026</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/746/1*liw4d6N8TpFRstLaVSL0Zg.png\"></figure><p>There\u2019s no styling! This is because, even though we ran collectstatic in the deploy, we haven\u2019t configured production static and media settings, so Django doesn\u2019t know where to find the static\u00a0files.</p>\n<h3>Conclusion</h3>\n<p>We\u2019ve covered a good amount here, and you should be more familiar with the deployment process and debugging in Elastic Beanstalk.</p>\n<p>We will continue from here in <a href=\"https://medium.com/@zackcpetersen/production-django-elastic-beanstalk-part2-4501caf7d8fb\">part 2</a> and go over production static and media storage with\u00a0S3!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6632c0d4956a\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/better-programming/production-django-elastic-beanstalk-part1-6632c0d4956a\">Deploy a Production Django App With Elastic Beanstalk (Part 1)</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Using Django 3.1.3, Python 3.7.9, and Amazon Linux\u00a02</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*qlZzWcFRfYNW2F89\"><figcaption>Photo by <a href=\"https://unsplash.com/@brandi1?utm_source=medium&amp;utm_medium=referral\">Brandi Redd</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>In this tutorial, we\u2019ll be creating a simple Django Rest Framework (DRF) app and deploying it with Beanstalk to make our endpoints available on the web. We\u2019ll do everything, from creating our virtual environment and getting the Django app running locally, to deploying the code on Beanstalk and hooking it into a Postgresql RDS database. Let\u2019s get\u00a0going!</p>\n<p><em>If you\u2019re already familiar with everything covered here, or you\u2019re looking for help with handling production static and media files, database settings, or environment variables\u200a\u2014\u200acheck out </em><a href=\"https://medium.com/@zackcpetersen/production-django-elastic-beanstalk-part2-4501caf7d8fb\"><strong><em>part 2</em></strong></a><em>\u00a0instead!</em></p>\n<h3>Table of\u00a0Contents</h3>\n<ol>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#d874\"><strong>Why Use Elastic Beanstalk</strong></a></li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#a8cf\"><strong>Installing Pyenv and\u00a0Pipenv</strong></a></li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#a53e\"><strong>Clone The\u00a0Repo</strong></a></li>\n<li>\n<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#504c\"><strong>Preparing Beanstalk</strong></a><strong><br>\u200a\u2014\u200a</strong><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#9261\">Downloading the EB CLI</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#82d7\">Initializing elastic Beanstalk</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#9cbc\">Creating the Beanstalk environment</a><br>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#1fe6\">Adding\u00a0.ebextensions</a>\n</li>\n<li>\n<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#c66f\"><strong>SSH Into the Server</strong></a><strong> (Debugging)<br></strong>\u200a\u2014\u200a<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#f439\">Grab your EC2 instance public IP</a><br> \u2014<a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#3ff5\">Checking the log\u00a0files</a>\n</li>\n<li><a href=\"https://medium.com/@zackcpetersen?source=rss-5da2dac3078e------2#16a4\"><strong>Add Your\u00a0.ebextensions directory and\u00a0deploy</strong></a></li>\n</ol>\n<h3>Why Use Elastic Beanstalk?</h3>\n<p>EBS (Elastic Beanstalk) is a platform-as-a-service used to deploy web apps without the pain of creating your own EC2 instances, load balancers, auto-scaling, health monitoring, and more. It\u2019s a quick and relatively easy way to get your app on the web. Despite everything being managed by AWS, it still leaves a decent amount of control and visibility to the developer.</p>\n<p>To get started, we\u2019ll be using Pipenv and Pyenv to help manage our dependencies and Python\u00a0version.</p>\n<h3>Installing Pyenv and\u00a0Pipenv</h3>\n<p>If you\u2019re using a Mac, you can brew install both requirements (shown below). If you\u2019re not on a mac, follow <a href=\"https://pipenv-fork.readthedocs.io/en/latest/install.html#pragmatic-installation-of-pipenv\">these instructions to install Pipenv</a>, and <a href=\"https://github.com/pyenv/pyenv#installation\">these for\u00a0Pyenv</a>.</p>\n<pre>brew install pipenv<br>brew install pyenv</pre>\n<p>For use with Pyenv, you\u2019ll also want to add this to your ~/.zprofile | ~/.zshrc if using zsh\u2014 or ~/.bashrc | ~/.bash_profile if using\u00a0bash.</p>\n<pre>export PYENV_ROOT=\"$HOME/.pyenv\"<br>export PATH=\"$PYENV_ROOT/bin:$PATH\"<br>if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then<br>  eval \"$(pyenv init -)\"<br>fi</pre>\n<p>After making changes to your ~/.zshrc or ~/.zprofile, be sure to restart your\u00a0shell:</p>\n<pre>exec \"$SHELL\"</pre>\n<p>Now we have both installed, let\u2019s download Python\u00a03.7.9:</p>\n<pre>pyenv install 3.7.9</pre>\n<p>This will take a minute, but once it\u2019s finished you\u2019ll have python 3.7.9 available on your pyenv\u00a0path.</p>\n<h3>Clone the\u00a0Repo</h3>\n<p>Now, let\u2019s create the project and the virtual environment with pipenv. Clone my lightweight <a href=\"https://github.com/zackcpetersen/iotd\">Image Of The Day repo</a> (built with DRF) to follow along with the tutorial:</p>\n<pre>git clone git@github.com:zackcpetersen/iotd.git<br>cd iotd<br>pipenv install --python ~/.pyenv/versions/3.7.9/bin/python</pre>\n<p><em>Note: if you don\u2019t have the correct python version on that path try\u00a0this:</em></p>\n<pre>~/.pyenv/shims/versions/3.7.9/bin/python</pre>\n<p>This will set the Python version in the virtual environment to 3.7.9 and install all requirements from the\u00a0Pipfile.</p>\n<p><em>Pro tip: If you have a requirements.txt file already, use </em><em>pipenv install -r requirements.txt to install everything from\u00a0there.</em></p>\n<p>The project directory should look something like\u00a0this:</p>\n<pre>\u251c\u2500\u2500 Pipfile<br>\u251c\u2500\u2500 Pipfile.lock<br>\u251c\u2500\u2500 db.sqlite3<br>\u251c\u2500\u2500 images<br>\u2502   \u251c\u2500\u2500 __init__.py<br>\u2502   \u251c\u2500\u2500 admin.py<br>\u2502   \u251c\u2500\u2500 api<br>\u2502   \u251c\u2500\u2500 apps.py<br>\u2502   \u251c\u2500\u2500 management<br>\u2502   \u251c\u2500\u2500 migrations<br>\u2502   \u251c\u2500\u2500 models.py<br>\u2502   \u251c\u2500\u2500 tests.py<br>\u2502   \u2514\u2500\u2500 views.py<br>\u251c\u2500\u2500 iotd<br>\u2502   \u251c\u2500\u2500 __init__.py<br>\u2502   \u251c\u2500\u2500 asgi.py<br>\u2502   \u251c\u2500\u2500 settings.py<br>\u2502   \u251c\u2500\u2500 urls.py<br>\u2502   \u2514\u2500\u2500 wsgi.py<br>\u251c\u2500\u2500 manage.py<br>\u251c\u2500\u2500 media<br>\u2514\u2500\u2500 static<br>    \u251c\u2500\u2500 admin<br>    \u2514\u2500\u2500 rest_framework</pre>\n<p>In a terminal, run pipenv shell, if you haven\u2019t already, and we\u2019ll make migrations, migrate, and createsuperuser. At this point, our local server should be ready to\u00a0go!</p>\n<p><em>The </em><em>createsu command is a </em><a href=\"https://docs.djangoproject.com/en/3.1/howto/custom-management-commands/\"><em>django-admin custom command</em></a><em> you can find in </em><em>images/management/commands/createsu.py</em>:</p>\n<pre>python manage.py makemigrations<br>python manage.py migrate<br>python manage.py createsu<br>python manage.py runserver</pre>\n<p>Navigate to <a href=\"http://127.0.0.1:8000/api/\">127.0.0.1:8000/api/</a> and you\u2019ll see a page that looks like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JsOePAnNBPwfnvsRcUmXxA.png\"></figure><p>Click on <a href=\"http://127.0.0.1:8000/api/images/\">http://127.0.0.1:8000/api/images/</a> to go to the image page of DRF. From here, add an image and give it a name. When it finishes uploading, click on the image link and your image will load from your local filesystem with the URL: http://127.0.0.1:8000/media/&lt;img_name&gt;\u00a0.</p>\n<p>Congratulations! You\u2019ve successfully set up your local environment and are ready to deploy to Beanstalk.</p>\n<h3>Preparing Beanstalk</h3>\n<p>Before you can use Beanstalk, you\u2019ll need an AWS account. If you don\u2019t have an account already, <a href=\"https://portal.aws.amazon.com/billing/signup#/start\">create one\u00a0here</a>.</p>\n<h4>Downloading the EB\u00a0CLI</h4>\n<p>Let\u2019s go back to the terminal window and install the Beanstalk CLI (pipenv install --dev if you cloned the repo). Be sure to run the pipenv shell\u00a0first:</p>\n<pre>pipenv install awsebcli --dev</pre>\n<p>I\u2019m installing to dev here because we most likely won\u2019t need the CLI on the production server, so it\u2019s best to leave it for development only.</p>\n<p>Confirm you have it installed with eb --version.</p>\n<pre>\u276f eb --version<br>EB CLI 3.19.2 (Python 3.7.9)</pre>\n<h4>Initializing elastic Beanstalk</h4>\n<p>Since we\u2019re all set up with AWS and Beanstalk CLI, let\u2019s get\u00a0started!</p>\n<pre>eb init</pre>\n<p>This will prompt you to get set up with Beanstalk and configure the default application options.</p>\n<ul>\n<li>\n<strong>Default Region</strong>: The default AWS region for beanstalk</li>\n<li>\n<strong>Credentials</strong>: Your AWS IAM user creds. Follow <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html\">this guide</a> to create one if you don\u2019t have them\u00a0already</li>\n<li>\n<strong>App name</strong>: What your application will be\u00a0named</li>\n<li>\n<strong>Python version</strong>: At the time of this writing, you can choose from Python 3.6 and Python 3.7. They are fundamentally different and this tutorial covers 3.7 with Gunicorn.</li>\n<li>\n<strong>CodeCommit</strong>: Out of the scope of this tutorial\u200a\u2014\u200aselect\u00a0no.</li>\n<li>\n<strong>SSH</strong>: Select create_new_keypair. Follow the prompts to create it and remember the name (default is aws-eb). In my opinion, tailing the server logs is the easiest way to figure out deployment problems.</li>\n<li>\n<strong>Keypair</strong>: You\u2019ll probably want to generate a new keypair, this will be passed as part of your SSH command to log in to the\u00a0server.</li>\n</ul>\n<p>Once you\u2019re done setting this up, you\u2019ll notice a new hidden directory in your project called\u00a0.elasticbeanstalk.</p>\n<p>There is a config.yml file in there and it\u2019s everything you set up saved to your local directory for future\u00a0use.</p>\n<p><em>Pro tip: If you need to start over with Beanstalk on this project for whatever reason, delete this directory and run </em><em>eb init again to change any defaults.</em></p>\n<h4>Creating the Beanstalk environment</h4>\n<p>Now that we have an application created on Beanstalk, let\u2019s create our environment:</p>\n<pre>eb create</pre>\n<p>Again, you\u2019ll be prompted with questions about what you would like to\u00a0create.</p>\n<ul>\n<li>\n<strong>Env Name</strong>: What your environment will be\u00a0named.</li>\n<li>\n<strong>DNS CNAME prefix</strong>: Leave as the\u00a0default.</li>\n<li>\n<strong>Load Balancer Type</strong>: Choose Application.</li>\n<li>\n<strong>Spot Fleet Requests</strong>: Out of scope, select\u00a0no.</li>\n</ul>\n<p>After you finish with the setup, it will begin to create the environment for you and try to deploy it to Beanstalk. This takes a few minutes, but feel free to watch events and see what\u2019s happening under the\u00a0hood.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mkqrRpd0h4SCyqBkgl92oA.png\"></figure><h4>Adding\u00a0.ebextensions</h4>\n<p>Once the deployment is finished, it should say it was successful. However, if you run eb open\u00a0, you\u2019ll get a 502 error when the webpage opens. This can difficult to debug because without a decent amount of digging, there\u2019s no way to see why. <em>Hint: it\u2019s your WSGI\u00a0path.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/268/1*BEis8r5pzIewv0amh_28cA.png\"></figure><p>To fix this, we\u2019ll create a new directory called\u00a0.ebextensions. Inside, we create a file called django.config. Make sure you\u2019re in at the project root for these commands.</p>\n<p><em>Note: If you cloned the repo, this file already exists and you just need to uncomment the config settings.</em></p>\n<pre>mkdir .ebextensions<br>touch .ebextensions/django.config</pre>\n<p>Here\u2019s how our project should look after creating the directory and\u00a0file:</p>\n<pre>\u251c\u2500\u2500 Pipfile<br>\u251c\u2500\u2500 Pipfile.lock<br>\u251c\u2500\u2500 db.sqlite3<br><strong>\u251c\u2500\u2500 .ebextensions<br>\u2502   \u251c\u2500\u2500 django.config</strong><br>\u251c\u2500\u2500 images<br>\u2502   \u251c\u2500\u2500 __init__.py<br>\u2502   \u251c\u2500\u2500 admin.py<br>\u2502   \u251c\u2500\u2500 api<br>\u2502   \u251c\u2500\u2500 apps.py<br>\u2502   \u251c\u2500\u2500 management<br>\u2502   \u251c\u2500\u2500 migrations<br>\u2502   \u251c\u2500\u2500 models.py<br>\u2502   \u251c\u2500\u2500 tests.py<br>\u2502   \u2514\u2500\u2500 views.py<br>\u251c\u2500\u2500 iotd<br>\u2502   \u251c\u2500\u2500 __init__.py<br>\u2502   \u251c\u2500\u2500 asgi.py<br>\u2502   \u251c\u2500\u2500 settings.py<br>\u2502   \u251c\u2500\u2500 urls.py<br>\u2502   \u2514\u2500\u2500 wsgi.py<br>\u251c\u2500\u2500 manage.py<br>\u251c\u2500\u2500 media<br>\u2514\u2500\u2500 static<br>    \u251c\u2500\u2500 admin<br>    \u2514\u2500\u2500 rest_framework</pre>\n<p>Inside the django.config file, add the following:</p>\n<pre>option_settings:<br>  aws:elasticbeanstalk:application:environment:<br>    DJANGO_SETTINGS_MODULE: \"iotd.settings\"<br>    PYTHONPATH: \"/var/app/current:$PYTHONPATH\"<br>  aws:elasticbeanstalk:container:python:<br>    WSGIPath: \"iotd.wsgi:application\"<br>  aws:elasticbeanstalk:environment:process:default:<br>    HealthCheckPath: \"/api\"<br>    MatcherHTTPCode: \"200-499\"<br><br>container_commands:<br>  01_makemigrations:<br>    command: \"source /var/app/venv/*/bin/activate &amp;&amp; python3 manage.py makemigrations --noinput\"<br>    leader_only: true<br>  02_migrate:<br>    command: \"source /var/app/venv/*/bin/activate &amp;&amp; python3 manage.py migrate --noinput\"<br>    leader_only: true<br>  03_createsu:<br>    command: \"source /var/app/venv/*/bin/activate &amp;&amp; python3 manage.py createsu\"<br>  04_collectstatic:<br>    command: \"source /var/app/venv/*/bin/activate &amp;&amp; python3 manage.py collectstatic --noinput\"<br>    leader_only: true</pre>\n<p>There\u2019s a lot going on here, but this config file has all the commands to get set up on the server and have your Django app running properly, including setting up your WSGI\u00a0path.</p>\n<p>My first time deploying to Elastic Beanstalk with Amazon Linux 2 was challenging because of these config settings. At the time of writing, it\u2019s not documented that you need to run the migration commands <em>after</em> manually activating the virtual environment (<a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-django.html#python-django-migrate-site\">see docs here</a>). They tell you to run django-admin.py migrate, which was throwing all sorts of errors for me and it was difficult to figure out what was\u00a0wrong.</p>\n<p>After some trial and error, I discovered the virtual environment on the application server is located at /var/app/venv/. So in the config commands, I first source (activate) the virtualenv and then run my migration commands as\u00a0normal.</p>\n<pre>### To run a command during deployment<br><strong>source /var/app/venv/*/bin/activate</strong> &amp;&amp; python manage.py migrate</pre>\n<p>Another \u201cgotcha\u201d I discovered when making my first Beanstalk environment is you need to have all the files you want to be deployed to the app server committed to git. For example, if you don\u2019t commit the\u00a0.ebextensions directory, it doesn\u2019t get added as a file in deployment and none of the commands inside will run. The same is true for your Pipfile and anything else Beanstalk needs to set up your\u00a0app.</p>\n<h3>SSH Into the\u00a0Server</h3>\n<p>Let\u2019s SSH into the server and watch our custom commands output as the app deploys. (This is optional but helpful for debugging if your deployment is having\u00a0issues).</p>\n<h4>Grab your EC2 instance public\u00a0IP</h4>\n<p>The new keypair you created with eb init earlier should be stored in your ~/.ssh directory. With that in mind, navigate to your <a href=\"http://console.aws.amazon.com/ec2/v2/home#Instances:\">AWS EC2 instances</a> and find the Public IPv4 address with the instance that was created. If you don\u2019t see your instance, check your\u00a0region!</p>\n<p>If you aren\u2019t sure which instance it is, check the tags on your instances to find the one that corresponds with your Beanstalk name.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/267/1*Bi-9NySLb20crvtBRwak3Q.png\"></figure><p>Copy the address and\u00a0run:</p>\n<pre>ssh -i ~/.ssh/&lt;keypair_name&gt; ec2-user@&lt;public_ipv4_address&gt;<br>## Example<br>ssh -i ~/.ssh/aws-eb ec2-user@34.216.119.130</pre>\n<p>Type yes to add the host to your known hosts. We\u2019re\u00a0in!</p>\n<p>Now to check the log files. You can accomplish something similar by downloading the logs from the Beanstalk console, but it was annoying to me and took too many extra steps. Here, we\u2019re going to tail the log files as they populate and see if we run into issues in real-time.</p>\n<h4>Checking the log\u00a0files</h4>\n<p>Navigate to the log directory with cd /var/log/:</p>\n<pre>[ec2-user@ip-172-31-21-105 ~]$ cd /var/log/</pre>\n<p>In this directory, if you ls you\u2019ll see a whole bunch of log files to check out. In my experience with Beanstalk, there are three that are the most informative about deployment issues:</p>\n<pre>eb-engine.log<br>cfn-init.log<br>cfn-init-cmd.log</pre>\n<p>When I have an issue on deployment, I check the logs in this order and have been able to pinpoint the problem exactly. For this example, let\u2019s tail the most granular log and see the output as it\u00a0deploys:</p>\n<pre>tail -n 100 -f cfn-init-cmd.log</pre>\n<p>The -f in this command means follow, so you will be able to see the logs as they are updated. Leave this here for now, we\u2019ll come back to\u00a0it.</p>\n<h3>Add Your\u00a0.ebextensions Directory and\u00a0Deploy</h3>\n<p>In a separate terminal window, navigate back to the iotd project root and add everything to git (including db.sqlite3). <em>Note: you don\u2019t have to push anything up, you only need to commit the files that you want deployed.</em></p>\n<pre>git add .<br>git commit -m \"adding .ebextension config file\"</pre>\n<p>Once your changes are committed, it\u2019s time to deploy again\u200a\u2014\u200athis time, we\u2019ll watch the logs to see what happens. Make sure to run pipenv shell before running any commands.</p>\n<p><em>Pro Tip: If you\u2019re serious you can open three terminal windows and watch all three log files at\u00a0once.</em></p>\n<pre>eb deploy</pre>\n<p>If all goes well, as the deployment runs you should see outputs that look something like\u00a0this:</p>\n<pre> Command 01_makemigrations<br> -----------------------Command Output-----------------------<br>  Migrations for 'images':<br>    images/migrations/0002_auto_20201125_0049.py<br>      - Alter field image on image<br> ------------------------------------------------------------<br> Completed successfully.</pre>\n<p>Now if you go back to your project root folder and run eb open again, you should land on a page that looks like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sategCAUXeOLeLi459b-MQ.png\"></figure><p>Progress! This is much better than the 502 error we had before. To fix this, go to the iotd/settings.py file and add your beanstalk URL to the ALLOWED_HOSTS setting. Commit your changes to git and run eb deploy\u00a0again.</p>\n<p><em>Hint: Find your beanstalk URL with </em><em>eb status, look for\u00a0CNAME.</em></p>\n<p>Run eb open and add \u201c/api/\u201d to the end of your URL. This time, success!\u00a0Except\u2026</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/746/1*liw4d6N8TpFRstLaVSL0Zg.png\"></figure><p>There\u2019s no styling! This is because, even though we ran collectstatic in the deploy, we haven\u2019t configured production static and media settings, so Django doesn\u2019t know where to find the static\u00a0files.</p>\n<h3>Conclusion</h3>\n<p>We\u2019ve covered a good amount here, and you should be more familiar with the deployment process and debugging in Elastic Beanstalk.</p>\n<p>We will continue from here in <a href=\"https://medium.com/@zackcpetersen/production-django-elastic-beanstalk-part2-4501caf7d8fb\">part 2</a> and go over production static and media storage with\u00a0S3!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6632c0d4956a\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/better-programming/production-django-elastic-beanstalk-part1-6632c0d4956a\">Deploy a Production Django App With Elastic Beanstalk (Part 1)</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["elastic-beanstalk","django","aws","python","programming"]},{"title":"Your Guide to Regular Expressions in Python and Terminal","pubDate":"2020-08-03 18:00:39","link":"https://medium.com/better-programming/your-guide-to-regular-expressions-in-python-terminal-b54d25cbe185?source=rss-5da2dac3078e------2","guid":"https://medium.com/p/b54d25cbe185","author":"Zack Petersen","thumbnail":"","description":"\n<h4>Step up your regex\u00a0know-how</h4>\n<p>Regular expressions. If you know how to use them, they are awesome and powerful. If not, they look like an alien language that needs to be decoded. Either way, this guide will cover the basics of regexes and how they are used to make the life of a programmer easier. We will then go over the basic &amp; extended set and how they can be used in Python and terminal. By the end, you\u2019ll have enough regex know-how to step up your everyday\u00a0coding.</p>\n<h3><strong>The Basics</strong></h3>\n<p>Regular expressions are a way to search for patterns in data sets. It is not a programming language on its own, but all major languages have a regex engine built-in for you to\u00a0utilize.</p>\n<p>What is a regular expression anyway?</p>\n<blockquote>\u201cA regular expression is a sequence of characters that define a search pattern.\u201d\u200a\u2014\u200a<a href=\"https://en.wikipedia.org/wiki/Regular_expression\">Wikipedia</a>\n</blockquote>\n<p>The \u201csequence of characters\u201d are regex syntax, and if you\u2019ve ever seen it you know how foreign it is to read, let alone understand, especially at first. For\u00a0example:</p>\n<p><em>^\\(?[0-9]{3}\\)?[\\-\\s]?[0-9]{3}[\\-\\s]?[0-9]{4}$</em></p>\n<p>At first glance, this can be pretty overwhelming. Most of us don\u2019t want to even try and figure it out. But, it\u2019s just an expression to match a phone number. We\u2019ll break this down in-depth later in the article, so don\u2019t worry if you don\u2019t understand it right\u00a0now.</p>\n<h4><strong>When to, and when not to, use\u00a0regexes</strong></h4>\n<p>Regexes are useful to programmatically:</p>\n<ul>\n<li>Find patterns and matches in data sets: Whether it\u2019s a\u00a0.csv or\u00a0.txt, they\u2019ve got you\u00a0covered</li>\n<li>Validate forms and inputs: Do this on the frontend before you submit a form to make sure there are no issues behind the scenes once it\u2019s been\u00a0sent.</li>\n<li>Scrape information from the web: Looking to scrape every link (&lt;a&gt;&lt;/a&gt;) off of a webpage? There\u2019s an expression for\u00a0that.</li>\n</ul>\n<h4><strong>What are the limitations of regular expressions?</strong></h4>\n<ul>\n<li>Regular expressions are not a programming language. They are tools and all major languages utilize\u00a0them.</li>\n<li>Difficult to read. Especially if you\u2019re not familiar with them, it\u2019s pretty intimidating and most people, myself included, tend to stay away from them for as long as possible.</li>\n<li>Can be difficult to write correctly, even if you know what you\u2019re doing. Sometimes getting it to work exactly how you want takes more than a few\u00a0tries.</li>\n</ul>\n<h3><strong>Different Types of Regular Expressions</strong></h3>\n<p>At this point, we have a basic understanding of what regular expressions are and how they can be used. However, being able to write them on your own is a valuable tool to have. Let\u2019s dive\u00a0in.</p>\n<h4><strong>Basic &amp; extended\u00a0set</strong></h4>\n<p>Regexes have a basic set and an extended set. For this guide, we will cover the basic set and only parts of the extended set, to see an exhaustive list of what\u2019s available, check out the <a href=\"https://docs.python.org/3/library/re.html\">regular expression operation docs</a> for\u00a0Python.</p>\n<p><strong>Basic Set\u00a0Symbols</strong></p>\n<p>.\u200a\u2014\u200aperiod (wildcard): replaces any character</p>\n<p>^\u200a\u2014\u200acaret: matches the start of a\u00a0string</p>\n<p>$\u200a\u2014\u200adollar sign: matches the end of a\u00a0string</p>\n<p>*\u200a\u2014\u200aasterisk: matches the preceding expression <strong>zero or more</strong>\u00a0times</p>\n<p>\\\u200a\u2014\u200aforward slash: represents special characters and escapes characters</p>\n<p>()\u200a\u2014\u200aparenthesis: groups expressions together</p>\n<p>?\u200a\u2014\u200aquestion mark: matches <strong>zero or one</strong> of the preceding expression</p>\n<p>\\s\u200a\u2014\u200aescaped \u2018s\u2019: represents whitespace</p>\n<p>[wxyz]\u200a\u2014\u200asquare brackets, literal: represents <strong>one </strong>of the characters inside (either w, x, y, or\u00a0z)</p>\n<p>[w-z]\u2014 square bracket, range: represents <strong>one </strong>of the characters inside the range (either w, x, y, or z ), can also be used with numbers [10\u2013100].</p>\n<p>[^wxyz]\u200a\u2014\u200asquare brackets, negated: represents any character <strong>not </strong>in the set (anything except w, x, y, or z). Note the caret <strong>inside </strong>the square brackets, has a different meaning than caret from\u00a0above.</p>\n<p>\\w\u200a\u2014\u200aword: matches any ASCII letter, digit, or underscore</p>\n<p><strong>Extended Set\u00a0Symbols</strong></p>\n<p>+\u200a\u2014\u200aplus sign: matches the preceding expression <strong>one or more</strong>\u00a0times</p>\n<p>|\u200a\u2014\u200apipe: used as an <strong>\u201cor\u201d comparison operator</strong>. Will match either expression1 OR expression2: expression1|expression2</p>\n<p>{n}\u2014 will match <strong>\u201cn\u201d occurrences of the preceding expression</strong>, similar to *, +, and\u00a0?, except if you define the max number of occurrences with\u00a0n.</p>\n<p>The main difference to keep in mind when using the basic set vs. the extended set will be in the terminal. grep, for example, will need to be followed by -E when using symbols from the extended\u00a0set.</p>\n<p>grep -E \u2018your-extended-regex\u2019</p>\n<h3>Breaking Down the Expression</h3>\n<p>Let\u2019s revisit that expression from the beginning:</p>\n<p>^\\(?[0-9]{3}\\)?[\\-\\s]?[0-9]{3}[\\-\\s]?[0-9]{4}$</p>\n<p>To make this easier to read, let\u2019s break it into smaller chunks and reverse-engineer it to show how it actually matches a phone number. Use the symbols labeled above as a guide. You can also check out <a href=\"https://regexr.com/\">RegExr</a> and follow along to see matches as they are\u00a0created.</p>\n<p>^\u200a\u2014\u200athe caret: This is to signify the start of our string. Easy\u00a0peasy.</p>\n<p>\\(?\u200a\u2014\u200aoptional open parenthesis: We are first escaping \\ it so it will read as a literal character (\u00a0. Then we\u2019ll add a\u00a0? to look for it either zero or one time, making it optional.</p>\n<p>[0\u20139]{3}\u200a\u2014\u200alooks for any three consecutive numbers, aka an area code (305, 801,\u00a0702).</p>\n<p>\\)?\u200a\u2014\u200aoptional closing parenthesis</p>\n<p>At this point, the expression will match either 123 or\u00a0(123).</p>\n<p>[\\-\\s]?\u200a\u2014\u200aoptional whitespace <strong>or </strong>dash: \\s is the expression for space or whitespace, inside the brackets with a \\- (escaped dash), followed by a\u00a0?, so it will look for it zero or one\u00a0time.</p>\n<p>[0-9]{3}\u200a\u2014\u200alooks for any three consecutive numbers</p>\n<p>[\\-\\s]?\u200a\u2014\u200aoptional dash or whitespace.</p>\n<p>[0-9]{4}\u200a\u2014\u200afinal expression before the ending tag, looks for any four consecutive numbers.</p>\n<p>$\u200a\u2014\u200aend of the\u00a0string.</p>\n<p>In this case, both the ^ and the $ could be omitted and are not required for this specific expression. I left them in because they are useful to know and work either way for this scenario. If the phone number was in the middle of other text, you would want to leave them both\u00a0out.</p>\n<p>It\u2019s not so bad when it\u2019s broken down, right? This expression will match any of the following phone number\u00a0formats:</p>\n<ul>\n<li>1234567891</li>\n<li>123 456\u00a07891</li>\n<li>123 456\u20137891</li>\n<li>123\u2013456\u20137891</li>\n<li>(123) 456\u00a07891</li>\n<li>(123) 456\u20137891</li>\n</ul>\n<p>We can simplify if we wish to ignore certain parts of the original expression:</p>\n<p><em>[0-9]{10}\u200a\u2014\u200a</em>probably the simplest way to check, will not match if any dashes, spaces, or parenthesis are included. Only looks for consecutive ten-digit number.</p>\n<p>[0-9]{3}[0-9]{3}[0-9]{4}\u200a\u2014\u200aa different way to write a consecutive ten-digit number expression (this is essentially identical to the expression above), makes it easier to add in dashes or\u00a0spaces.</p>\n<p>[0-9]{3}[\\-\\s]?[0-9]{3}[\\-\\s]?[0-9]{4}\u200a\u2014\u200asame as previous, with checks for dashes and\u00a0spaces</p>\n<p>Now, let\u2019s look at one way to identify patterns and build our own\u00a0regexes.</p>\n<h3>Regular Expression to Match an Email\u00a0Address</h3>\n<p>At this point, we\u2019ve got a basic understanding of some of the symbols and tools available for use in building these expressions. Let\u2019s take a look at another common pattern we\u2019re all familiar with, email addresses.</p>\n<p>Before we start actually making the regex, let's look at a three-step process to help us identify the pattern we\u2019d like to match\u00a0with.</p>\n<ol>\n<li>What needs to be included or excluded?</li>\n<li>Find patterns in the inclusions/exclusions.</li>\n<li>Write those patterns in a\u00a0RegEx.</li>\n</ol>\n<p>Looking at these emails as an\u00a0example:</p>\n<ul>\n<li>regular-expression-master101@gmail.com</li>\n<li>joe_smith@aol.com</li>\n<li>business-man99@bigbusiness.net</li>\n</ul>\n<p>Let\u2019s apply the three-step process above to our\u00a0email</p>\n<ol>\n<li>\n<strong>What needs to be included or excluded?</strong><br>- We\u2019ll break up the emails into parts.<br>&lt;username&gt;@&lt;second-level-domain&gt;.&lt;top-level-domain&gt;<br>- The top-level domain could end in\u00a0.com,\u00a0.net,\u00a0.org, etc. For the sake of this example, we are going to say that the max length will be four, (something like\u00a0.info).</li>\n<li>\n<strong>Find patterns in the inclusions/exclusions</strong><br>- Username will need to be pretty open, but we won\u2019t be allowing for special characters outside of underscores, dashes, and periods.<br>- We\u2019ll have a fixed @ symbol<br>- The second-level domain will exclude special characters except for underscores, dashes, and periods.<br>- The top-level domain must only be letters and have a max length of four and a min length of\u00a0two.</li>\n<li>\n<strong>Write those patterns in a RegEx</strong><br>- Username, [\\w\\-\\.]+, \\w matches with any ASCII letter, digit, underscore. \\- is a literal dash. \\. is a period. Wrap those in square brackets to match any one of them, and add + after to include it one or more times.<br>- Fixed @ symbol matches with the @ symbol and nothing else. This is required.<br>- Second-level domain, ([\\w\\-]+\\.)+\u00a0, similar to username expression, except this allows for multiple expressions to be strung together and is grouped with parenthesis () (example@<strong>myurl.co</strong>.uk)<br>- Top-level domain, [a-zA-Z]{2,4}, allows for \u201cA\u201d through \u201cZ,\u201d both lower and uppercase, from two to four characters in\u00a0length.</li>\n</ol>\n<p>Put all of this together, with a caret at the beginning and a dollar sign at the end, and let's see what it looks\u00a0like.</p>\n<p>^[\\w\\-\\.]+@([\\w\\-]+\\.)+[a-zA-Z]{2,4}$</p>\n<p>Beautiful. Throw that into RegExr and test it against each email individually, or remove the caret and dollar sign and test them all together. I also encourage you to add and remove parts of the regex to see if you can make it more or less flexible.</p>\n<p><strong>Challenge</strong>: Write the above regex without using the \\w anywhere in the expression.</p>\n<p>Learning regexes is great and all, but how do we actually apply it to our daily programming? Let\u2019s look at how we can use regexes in terminal and\u00a0Python.</p>\n<p><em>Note:<br>Different regex engines handle expressions in their own ways. Sometimes, what works on </em><a href=\"http://regexr.com/\"><em>regexr.com</em></a><em> or in grep might not work in Python &amp; vice-versa. You may have to experiment and try making your Regular Expressions in a few ways before it works as\u00a0expected</em></p>\n<h3>Regular Expressions In\u00a0Terminal</h3>\n<p>For this example, we\u2019ll be using grep. Grep is a command-line utility used for searching plain-text data sets and it has its own regex engine built in! Let\u2019s grab the phone numbers and emails we\u2019ve used up to this point and throw them in a\u00a0.txt file that we can search with. Copy the text below and paste it into a terminal\u00a0window.</p>\n<pre>cat &lt;&lt; EOF &gt;&gt; regex-test.txt<br>1234567891<br>123 456 7891<br>123 456-7891<br>123-456-7891<br>(123) 456 7891<br>(123) 456-7891<br>regular-expression-master101@gmail.com<br>joe_smith@aol.com<br>business-man99@bigbusiness.net<em><br>EOF</em></pre>\n<p>This will create a new file called regex-test.txt and the phone numbers and emails will be inside. From here, we can use grep to search for\u00a0matches.</p>\n<p>For my version of grep (2.5.1), the \\s doesn\u2019t always work to identify whitespace. Because of this, you may or may not need to replace the instances of \\s with [:space:] or just an actual space. With this in mind, here is an updated regular expression to use with grep to search phone numbers. Notice that I have changed \\s to [:space:] and removed the ^ and\u00a0$.</p>\n<p>Phone number regex: for use with grep<br>\\(?[0-9]{3}\\)?[-[:space:]]?[0-9]{3}[-[:space:]]?[0-9]{4}</p>\n<p>Putting it all together, run this command in the same directory as the regex-test.txt file you just created. If it doesn\u2019t work, try replacing the space with either \\s or just actual whitespace.</p>\n<p>grep -E '<em>\\(?[0-9]{3}\\)?[-[:space:]]?[0-9]{3}[-[:space:]]?[0-9]{4}</em>' regex-test.txt</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*19o5XFdhtGROnPnYeXXEOQ.jpeg\"><figcaption>Screencap provided by\u00a0author</figcaption></figure><p><strong>Challenge</strong>: Experiment with the email regex we wrote above and see if you can make it work with grep to find the email matches in this\u00a0file.</p>\n<h3>Regular Expressions in\u00a0Python</h3>\n<p>A key difference that I\u2019ve found when running regexes in Python (vs. grep) is instead of checking an entire file, it often works better to check one entry at a time\u00a0instead.</p>\n<p>For this example, I\u2019ve added the emails into a list and we\u2019ll loop through it to check each one individually. If the email matches, it will print the match.group()\u200a\u2014\u200awhat it matched with\u200a\u2014\u200aand if it doesn\u2019t match, it will print \u201cInvalid\u00a0Email.\u201d</p>\n<p>The email regex is exactly the same as above for this\u00a0example.</p>\n<a href=\"https://medium.com/media/95897fdbf675a027112d98780e9ae1fb/href\">https://medium.com/media/95897fdbf675a027112d98780e9ae1fb/href</a><h3>Conclusion</h3>\n<p>There you have it. We\u2019ve covered a basic overview of regular expressions and learned how to apply them in both terminal and Python. With this knowledge, you can utilize the power of regexes and become a much more efficient programmer.</p>\n<p>Helpful Links<br>- <a href=\"https://blog.robertelder.org/regular-expression-visualizer/\">Regular Expression Visualizer</a><br>- <a href=\"https://regexr.com/\">Regexr</a><br>- <a href=\"https://docs.python.org/3/howto/regex.html\">Python Regular Expression HOWTO</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b54d25cbe185\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/better-programming/your-guide-to-regular-expressions-in-python-terminal-b54d25cbe185\">Your Guide to Regular Expressions in Python and Terminal</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Step up your regex\u00a0know-how</h4>\n<p>Regular expressions. If you know how to use them, they are awesome and powerful. If not, they look like an alien language that needs to be decoded. Either way, this guide will cover the basics of regexes and how they are used to make the life of a programmer easier. We will then go over the basic &amp; extended set and how they can be used in Python and terminal. By the end, you\u2019ll have enough regex know-how to step up your everyday\u00a0coding.</p>\n<h3><strong>The Basics</strong></h3>\n<p>Regular expressions are a way to search for patterns in data sets. It is not a programming language on its own, but all major languages have a regex engine built-in for you to\u00a0utilize.</p>\n<p>What is a regular expression anyway?</p>\n<blockquote>\u201cA regular expression is a sequence of characters that define a search pattern.\u201d\u200a\u2014\u200a<a href=\"https://en.wikipedia.org/wiki/Regular_expression\">Wikipedia</a>\n</blockquote>\n<p>The \u201csequence of characters\u201d are regex syntax, and if you\u2019ve ever seen it you know how foreign it is to read, let alone understand, especially at first. For\u00a0example:</p>\n<p><em>^\\(?[0-9]{3}\\)?[\\-\\s]?[0-9]{3}[\\-\\s]?[0-9]{4}$</em></p>\n<p>At first glance, this can be pretty overwhelming. Most of us don\u2019t want to even try and figure it out. But, it\u2019s just an expression to match a phone number. We\u2019ll break this down in-depth later in the article, so don\u2019t worry if you don\u2019t understand it right\u00a0now.</p>\n<h4><strong>When to, and when not to, use\u00a0regexes</strong></h4>\n<p>Regexes are useful to programmatically:</p>\n<ul>\n<li>Find patterns and matches in data sets: Whether it\u2019s a\u00a0.csv or\u00a0.txt, they\u2019ve got you\u00a0covered</li>\n<li>Validate forms and inputs: Do this on the frontend before you submit a form to make sure there are no issues behind the scenes once it\u2019s been\u00a0sent.</li>\n<li>Scrape information from the web: Looking to scrape every link (&lt;a&gt;&lt;/a&gt;) off of a webpage? There\u2019s an expression for\u00a0that.</li>\n</ul>\n<h4><strong>What are the limitations of regular expressions?</strong></h4>\n<ul>\n<li>Regular expressions are not a programming language. They are tools and all major languages utilize\u00a0them.</li>\n<li>Difficult to read. Especially if you\u2019re not familiar with them, it\u2019s pretty intimidating and most people, myself included, tend to stay away from them for as long as possible.</li>\n<li>Can be difficult to write correctly, even if you know what you\u2019re doing. Sometimes getting it to work exactly how you want takes more than a few\u00a0tries.</li>\n</ul>\n<h3><strong>Different Types of Regular Expressions</strong></h3>\n<p>At this point, we have a basic understanding of what regular expressions are and how they can be used. However, being able to write them on your own is a valuable tool to have. Let\u2019s dive\u00a0in.</p>\n<h4><strong>Basic &amp; extended\u00a0set</strong></h4>\n<p>Regexes have a basic set and an extended set. For this guide, we will cover the basic set and only parts of the extended set, to see an exhaustive list of what\u2019s available, check out the <a href=\"https://docs.python.org/3/library/re.html\">regular expression operation docs</a> for\u00a0Python.</p>\n<p><strong>Basic Set\u00a0Symbols</strong></p>\n<p>.\u200a\u2014\u200aperiod (wildcard): replaces any character</p>\n<p>^\u200a\u2014\u200acaret: matches the start of a\u00a0string</p>\n<p>$\u200a\u2014\u200adollar sign: matches the end of a\u00a0string</p>\n<p>*\u200a\u2014\u200aasterisk: matches the preceding expression <strong>zero or more</strong>\u00a0times</p>\n<p>\\\u200a\u2014\u200aforward slash: represents special characters and escapes characters</p>\n<p>()\u200a\u2014\u200aparenthesis: groups expressions together</p>\n<p>?\u200a\u2014\u200aquestion mark: matches <strong>zero or one</strong> of the preceding expression</p>\n<p>\\s\u200a\u2014\u200aescaped \u2018s\u2019: represents whitespace</p>\n<p>[wxyz]\u200a\u2014\u200asquare brackets, literal: represents <strong>one </strong>of the characters inside (either w, x, y, or\u00a0z)</p>\n<p>[w-z]\u2014 square bracket, range: represents <strong>one </strong>of the characters inside the range (either w, x, y, or z ), can also be used with numbers [10\u2013100].</p>\n<p>[^wxyz]\u200a\u2014\u200asquare brackets, negated: represents any character <strong>not </strong>in the set (anything except w, x, y, or z). Note the caret <strong>inside </strong>the square brackets, has a different meaning than caret from\u00a0above.</p>\n<p>\\w\u200a\u2014\u200aword: matches any ASCII letter, digit, or underscore</p>\n<p><strong>Extended Set\u00a0Symbols</strong></p>\n<p>+\u200a\u2014\u200aplus sign: matches the preceding expression <strong>one or more</strong>\u00a0times</p>\n<p>|\u200a\u2014\u200apipe: used as an <strong>\u201cor\u201d comparison operator</strong>. Will match either expression1 OR expression2: expression1|expression2</p>\n<p>{n}\u2014 will match <strong>\u201cn\u201d occurrences of the preceding expression</strong>, similar to *, +, and\u00a0?, except if you define the max number of occurrences with\u00a0n.</p>\n<p>The main difference to keep in mind when using the basic set vs. the extended set will be in the terminal. grep, for example, will need to be followed by -E when using symbols from the extended\u00a0set.</p>\n<p>grep -E \u2018your-extended-regex\u2019</p>\n<h3>Breaking Down the Expression</h3>\n<p>Let\u2019s revisit that expression from the beginning:</p>\n<p>^\\(?[0-9]{3}\\)?[\\-\\s]?[0-9]{3}[\\-\\s]?[0-9]{4}$</p>\n<p>To make this easier to read, let\u2019s break it into smaller chunks and reverse-engineer it to show how it actually matches a phone number. Use the symbols labeled above as a guide. You can also check out <a href=\"https://regexr.com/\">RegExr</a> and follow along to see matches as they are\u00a0created.</p>\n<p>^\u200a\u2014\u200athe caret: This is to signify the start of our string. Easy\u00a0peasy.</p>\n<p>\\(?\u200a\u2014\u200aoptional open parenthesis: We are first escaping \\ it so it will read as a literal character (\u00a0. Then we\u2019ll add a\u00a0? to look for it either zero or one time, making it optional.</p>\n<p>[0\u20139]{3}\u200a\u2014\u200alooks for any three consecutive numbers, aka an area code (305, 801,\u00a0702).</p>\n<p>\\)?\u200a\u2014\u200aoptional closing parenthesis</p>\n<p>At this point, the expression will match either 123 or\u00a0(123).</p>\n<p>[\\-\\s]?\u200a\u2014\u200aoptional whitespace <strong>or </strong>dash: \\s is the expression for space or whitespace, inside the brackets with a \\- (escaped dash), followed by a\u00a0?, so it will look for it zero or one\u00a0time.</p>\n<p>[0-9]{3}\u200a\u2014\u200alooks for any three consecutive numbers</p>\n<p>[\\-\\s]?\u200a\u2014\u200aoptional dash or whitespace.</p>\n<p>[0-9]{4}\u200a\u2014\u200afinal expression before the ending tag, looks for any four consecutive numbers.</p>\n<p>$\u200a\u2014\u200aend of the\u00a0string.</p>\n<p>In this case, both the ^ and the $ could be omitted and are not required for this specific expression. I left them in because they are useful to know and work either way for this scenario. If the phone number was in the middle of other text, you would want to leave them both\u00a0out.</p>\n<p>It\u2019s not so bad when it\u2019s broken down, right? This expression will match any of the following phone number\u00a0formats:</p>\n<ul>\n<li>1234567891</li>\n<li>123 456\u00a07891</li>\n<li>123 456\u20137891</li>\n<li>123\u2013456\u20137891</li>\n<li>(123) 456\u00a07891</li>\n<li>(123) 456\u20137891</li>\n</ul>\n<p>We can simplify if we wish to ignore certain parts of the original expression:</p>\n<p><em>[0-9]{10}\u200a\u2014\u200a</em>probably the simplest way to check, will not match if any dashes, spaces, or parenthesis are included. Only looks for consecutive ten-digit number.</p>\n<p>[0-9]{3}[0-9]{3}[0-9]{4}\u200a\u2014\u200aa different way to write a consecutive ten-digit number expression (this is essentially identical to the expression above), makes it easier to add in dashes or\u00a0spaces.</p>\n<p>[0-9]{3}[\\-\\s]?[0-9]{3}[\\-\\s]?[0-9]{4}\u200a\u2014\u200asame as previous, with checks for dashes and\u00a0spaces</p>\n<p>Now, let\u2019s look at one way to identify patterns and build our own\u00a0regexes.</p>\n<h3>Regular Expression to Match an Email\u00a0Address</h3>\n<p>At this point, we\u2019ve got a basic understanding of some of the symbols and tools available for use in building these expressions. Let\u2019s take a look at another common pattern we\u2019re all familiar with, email addresses.</p>\n<p>Before we start actually making the regex, let's look at a three-step process to help us identify the pattern we\u2019d like to match\u00a0with.</p>\n<ol>\n<li>What needs to be included or excluded?</li>\n<li>Find patterns in the inclusions/exclusions.</li>\n<li>Write those patterns in a\u00a0RegEx.</li>\n</ol>\n<p>Looking at these emails as an\u00a0example:</p>\n<ul>\n<li>regular-expression-master101@gmail.com</li>\n<li>joe_smith@aol.com</li>\n<li>business-man99@bigbusiness.net</li>\n</ul>\n<p>Let\u2019s apply the three-step process above to our\u00a0email</p>\n<ol>\n<li>\n<strong>What needs to be included or excluded?</strong><br>- We\u2019ll break up the emails into parts.<br>&lt;username&gt;@&lt;second-level-domain&gt;.&lt;top-level-domain&gt;<br>- The top-level domain could end in\u00a0.com,\u00a0.net,\u00a0.org, etc. For the sake of this example, we are going to say that the max length will be four, (something like\u00a0.info).</li>\n<li>\n<strong>Find patterns in the inclusions/exclusions</strong><br>- Username will need to be pretty open, but we won\u2019t be allowing for special characters outside of underscores, dashes, and periods.<br>- We\u2019ll have a fixed @ symbol<br>- The second-level domain will exclude special characters except for underscores, dashes, and periods.<br>- The top-level domain must only be letters and have a max length of four and a min length of\u00a0two.</li>\n<li>\n<strong>Write those patterns in a RegEx</strong><br>- Username, [\\w\\-\\.]+, \\w matches with any ASCII letter, digit, underscore. \\- is a literal dash. \\. is a period. Wrap those in square brackets to match any one of them, and add + after to include it one or more times.<br>- Fixed @ symbol matches with the @ symbol and nothing else. This is required.<br>- Second-level domain, ([\\w\\-]+\\.)+\u00a0, similar to username expression, except this allows for multiple expressions to be strung together and is grouped with parenthesis () (example@<strong>myurl.co</strong>.uk)<br>- Top-level domain, [a-zA-Z]{2,4}, allows for \u201cA\u201d through \u201cZ,\u201d both lower and uppercase, from two to four characters in\u00a0length.</li>\n</ol>\n<p>Put all of this together, with a caret at the beginning and a dollar sign at the end, and let's see what it looks\u00a0like.</p>\n<p>^[\\w\\-\\.]+@([\\w\\-]+\\.)+[a-zA-Z]{2,4}$</p>\n<p>Beautiful. Throw that into RegExr and test it against each email individually, or remove the caret and dollar sign and test them all together. I also encourage you to add and remove parts of the regex to see if you can make it more or less flexible.</p>\n<p><strong>Challenge</strong>: Write the above regex without using the \\w anywhere in the expression.</p>\n<p>Learning regexes is great and all, but how do we actually apply it to our daily programming? Let\u2019s look at how we can use regexes in terminal and\u00a0Python.</p>\n<p><em>Note:<br>Different regex engines handle expressions in their own ways. Sometimes, what works on </em><a href=\"http://regexr.com/\"><em>regexr.com</em></a><em> or in grep might not work in Python &amp; vice-versa. You may have to experiment and try making your Regular Expressions in a few ways before it works as\u00a0expected</em></p>\n<h3>Regular Expressions In\u00a0Terminal</h3>\n<p>For this example, we\u2019ll be using grep. Grep is a command-line utility used for searching plain-text data sets and it has its own regex engine built in! Let\u2019s grab the phone numbers and emails we\u2019ve used up to this point and throw them in a\u00a0.txt file that we can search with. Copy the text below and paste it into a terminal\u00a0window.</p>\n<pre>cat &lt;&lt; EOF &gt;&gt; regex-test.txt<br>1234567891<br>123 456 7891<br>123 456-7891<br>123-456-7891<br>(123) 456 7891<br>(123) 456-7891<br>regular-expression-master101@gmail.com<br>joe_smith@aol.com<br>business-man99@bigbusiness.net<em><br>EOF</em></pre>\n<p>This will create a new file called regex-test.txt and the phone numbers and emails will be inside. From here, we can use grep to search for\u00a0matches.</p>\n<p>For my version of grep (2.5.1), the \\s doesn\u2019t always work to identify whitespace. Because of this, you may or may not need to replace the instances of \\s with [:space:] or just an actual space. With this in mind, here is an updated regular expression to use with grep to search phone numbers. Notice that I have changed \\s to [:space:] and removed the ^ and\u00a0$.</p>\n<p>Phone number regex: for use with grep<br>\\(?[0-9]{3}\\)?[-[:space:]]?[0-9]{3}[-[:space:]]?[0-9]{4}</p>\n<p>Putting it all together, run this command in the same directory as the regex-test.txt file you just created. If it doesn\u2019t work, try replacing the space with either \\s or just actual whitespace.</p>\n<p>grep -E '<em>\\(?[0-9]{3}\\)?[-[:space:]]?[0-9]{3}[-[:space:]]?[0-9]{4}</em>' regex-test.txt</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*19o5XFdhtGROnPnYeXXEOQ.jpeg\"><figcaption>Screencap provided by\u00a0author</figcaption></figure><p><strong>Challenge</strong>: Experiment with the email regex we wrote above and see if you can make it work with grep to find the email matches in this\u00a0file.</p>\n<h3>Regular Expressions in\u00a0Python</h3>\n<p>A key difference that I\u2019ve found when running regexes in Python (vs. grep) is instead of checking an entire file, it often works better to check one entry at a time\u00a0instead.</p>\n<p>For this example, I\u2019ve added the emails into a list and we\u2019ll loop through it to check each one individually. If the email matches, it will print the match.group()\u200a\u2014\u200awhat it matched with\u200a\u2014\u200aand if it doesn\u2019t match, it will print \u201cInvalid\u00a0Email.\u201d</p>\n<p>The email regex is exactly the same as above for this\u00a0example.</p>\n<a href=\"https://medium.com/media/95897fdbf675a027112d98780e9ae1fb/href\">https://medium.com/media/95897fdbf675a027112d98780e9ae1fb/href</a><h3>Conclusion</h3>\n<p>There you have it. We\u2019ve covered a basic overview of regular expressions and learned how to apply them in both terminal and Python. With this knowledge, you can utilize the power of regexes and become a much more efficient programmer.</p>\n<p>Helpful Links<br>- <a href=\"https://blog.robertelder.org/regular-expression-visualizer/\">Regular Expression Visualizer</a><br>- <a href=\"https://regexr.com/\">Regexr</a><br>- <a href=\"https://docs.python.org/3/howto/regex.html\">Python Regular Expression HOWTO</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b54d25cbe185\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/better-programming/your-guide-to-regular-expressions-in-python-terminal-b54d25cbe185\">Your Guide to Regular Expressions in Python and Terminal</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["regular-expressions","terminal","programming","regex","python"]}]}